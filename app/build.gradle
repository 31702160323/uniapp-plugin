import groovy.xml.XmlParser
import org.json.JSONException
import org.json.JSONObject

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk rootProject.ext.compileSdk
    buildToolsVersion rootProject.ext.buildToolsVersion

    def xml = new XmlParser().parse("${projectDir}/src/main/assets/data/dcloud_control.xml")
    def appId = xml.apps.app[0].attributes().get("appid")
    def manifest = new JSONObject(new File("${projectDir}/src/main/assets/apps/${appId}/www/manifest.json").getText('UTF-8'))

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk //建议此属性值设为21 io.dcloud.PandoraEntry 作为apk入口时   必须设置 targetSDKVersion>=21 沉浸式才生效
        versionCode = Integer.parseInt(manifest.get("version").get("code"))
        versionName = manifest.get("version").get("name")

        ndk {
            abiFilters 'x86'
            abiFilters 'x86_64'
            abiFilters 'arm64-v8a'
//            abiFilters 'armeabi-v7a'
        }
        resConfigs("zh-rCN")
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }

    signingConfigs {
        config {
            keyAlias 'uniplugin'
            keyPassword '185007'
            storeFile file('uniplugin.keystore')
            storePassword '185007'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.config
            shrinkResources true
            zipAlignEnabled true
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    DCLOUD_APPKEY: "3962ee207b721a20e35bb6ae110fed34", // 27:19:6E:38:6B:87:5E:76:AD:F7:00:E7:EA:84:E4:C6:EE:E3:3D:FA
            ]
        }
        debug {
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    DCLOUD_APPKEY: "3962ee207b721a20e35bb6ae110fed34", // 27:19:6E:38:6B:87:5E:76:AD:F7:00:E7:EA:84:E4:C6:EE:E3:3D:FA
            ]
        }
    }
    //使用uniapp时，需复制下面代码
    /*代码开始*/
    aaptOptions {
        additionalParameters '--auto-add-overlay'
        //noCompress 'foo', 'bar'
        ignoreAssetsPattern "!.svn:!.git:.*:!CVS:!thumbs.db:!picasa.ini:!*.scc:*~"
    }
    /*代码结束*/

    //导入aar需要的配置
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name.equals('debug')) {
                outputFileName  = "android_debug.apk"
            } else {
                outputFileName  = "XZH_" + defaultConfig.versionName + "_" + defaultConfig.versionCode + "_" + new Date().format("yyyy-MM-dd") + "_" + buildType.name + ".apk"
            }
//            output.processManifestProvider.get().doLast {}
        }

        variant.mergeAssetsProvider.get().doLast {
            def isDebug = variant.buildType.name == 'debug'
            System.out.println("环境：" + variant.buildType.name)
            System.out.println("versionCode：" + defaultConfig.versionCode)
            System.out.println("versionName：" + defaultConfig.versionName)
            def includes = ["uni-jsframework${isDebug ? "" : "-dev"}.js", "uni-jsframework-vue3${isDebug ? "" : "-dev"}.js"]
            def vueVersion = "2"

            try {
                vueVersion = manifest.get("plus").get("uni-app").get("vueVersion")
            } catch (IOException | JSONException e) {
                vueVersion = "2"
            }

            xml.attributes().put("debug", isDebug)
            xml.attributes().put("syncDebug", isDebug)

            System.out.println("vue：" + vueVersion)
            if (vueVersion == "3") {
                includes.add("uni-jsframework${!isDebug ? "" : "-dev"}.js")
            } else {
                includes.add("uni-jsframework-vue3${!isDebug ? "" : "-dev"}.js")
            }

            //删除assets文件夹下的所有zip文件，或者指定文件。(删除文件夹：文件夹名/**/*)
//            delete(fileTree(dir: variant.mergeAssetsProvider.get().outputDir, includes: includes))

            def findTargetFile = false
            outputs.files.getFiles().find {
                it.listFiles().find {
                    if (it.toString().contains("data")) {
                        it.listFiles().find {
                            findTargetFile = it.toString().contains("dcloud_control.xml")
                            if (findTargetFile) {
                                new File(it.toString()).write(groovy.xml.XmlUtil.serialize(xml), 'UTF-8')
                            }
                            return findTargetFile
                        }
                    }
                    return findTargetFile
                }
                return findTargetFile
            }
        }
    }
}
dependencies {
    implementation fileTree(include: ['*.?ar'], dir: 'libs')

    debugImplementation fileTree(dir: 'libs', include: ['debug-server-release.aar'])
    debugImplementation rootProject.ext.supportDependencies.okhttp
    debugImplementation rootProject.ext.supportDependencies.okio

    implementation rootProject.ext.supportDependencies.core
//    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0'
    implementation rootProject.ext.supportDependencies.legacy
    implementation rootProject.ext.supportDependencies.appcompat

    /*uniapp所需库-----------------------开始*/
    implementation rootProject.ext.supportDependencies.recyclerview
    implementation rootProject.ext.supportDependencies.fresco
    implementation rootProject.ext.supportDependencies.frescoGif
    /*uniapp所需库-----------------------结束*/
    // 基座需要，必须添加
    implementation rootProject.ext.supportDependencies.glide
    implementation rootProject.ext.supportDependencies.fastjson
    implementation rootProject.ext.supportDependencies.webkit

    // 添加uni-app插件
    implementation project(':grayview')
    implementation project(':floatview')
//    implementation project(':autostart')
//    implementation project(':calendar')
    implementation project(":musicNotification")
    implementation project(":widget")
    implementation project(":varyDesktopIcons")
//    implementation project(":pictureSelectorUni")
    implementation project(":shortcuts")
}
